Index: gtk+-3.0.9/gtk/gtkhscrollbar.c
===================================================================
--- gtk+-3.0.9.orig/gtk/gtkhscrollbar.c	2011-06-06 22:01:31.455723443 +0200
+++ gtk+-3.0.9/gtk/gtkhscrollbar.c	2011-06-06 19:54:05.177807603 +0200
@@ -31,6 +31,8 @@
 #include "gtkorientable.h"
 #include "gtkintl.h"
 
+static GtkWidget* (*os_scrollbar_new) (GtkOrientation, GtkAdjustment*) = NULL;
+static gboolean use_overlay_scrollbar = FALSE;
 
 G_DEFINE_TYPE (GtkHScrollbar, gtk_hscrollbar, GTK_TYPE_SCROLLBAR)
 
@@ -61,7 +63,67 @@
   g_return_val_if_fail (adjustment == NULL || GTK_IS_ADJUSTMENT (adjustment),
                         NULL);
 
+  if (use_overlay_scrollbar)
+    return os_scrollbar_new (GTK_ORIENTATION_HORIZONTAL, adjustment);
+
   return g_object_new (GTK_TYPE_HSCROLLBAR,
                        "adjustment", adjustment,
                        NULL);
 }
+
+/*
+ * ubuntu_gtk_hscrollbar_init:
+ *
+ * Initialize local use of the overlay-scrollbar module.
+ * 
+ * If the module is installed, this code checks both a whitelist
+ * and a blacklist to decide whether to activate the remplacement
+ * scrollbars.
+ *
+ * It is possible to force the feature to be disabled by setting
+ * the LIBOVERLAY_SCROLLBAR environment variable to either '0' or an
+ * empty value.
+ */
+void
+ubuntu_gtk_hscrollbar_init (void)
+{
+  static gboolean init_once = FALSE;
+
+  if (init_once == FALSE)
+    {
+      GModule *module = NULL;
+      gpointer symbol = NULL;
+
+      gchar *flag = (gchar*) g_getenv ("LIBOVERLAY_SCROLLBAR");
+
+      /* check if LIBOVERLAY_SCROLLBAR is set to 0 or an empty value
+         and disable the feature in this case */
+      if (flag != NULL && (*flag == '\0' || *flag == '0'))
+        goto skip_loading;
+
+      /* default extension library to use for this release */
+      gchar *path = "/usr/lib/liboverlay-scrollbar3-0.2.so.0";
+
+      module = g_module_open (path, G_MODULE_BIND_LOCAL);
+      if (module == NULL)
+        goto skip_loading;
+
+      /* check the blacklist, in all cases */
+      if (g_module_symbol (module, "os_utils_is_blacklisted", &symbol))
+        {
+          gboolean (*os_utils_is_blacklisted) (const gchar*) = symbol;
+          if (os_utils_is_blacklisted (g_get_prgname ()) == TRUE)
+            goto skip_loading;
+        }
+
+      /* all controls are positive: the feature can be activated now */
+      if (g_module_symbol (module, "os_scrollbar_new", &symbol))
+        {
+          os_scrollbar_new = symbol;
+          use_overlay_scrollbar = TRUE;
+        }
+
+skip_loading:
+      init_once = TRUE;
+    }
+}
Index: gtk+-3.0.9/gtk/gtkhscrollbar.h
===================================================================
--- gtk+-3.0.9.orig/gtk/gtkhscrollbar.h	2011-06-06 22:01:31.479723561 +0200
+++ gtk+-3.0.9/gtk/gtkhscrollbar.h	2011-06-06 19:54:26.889915270 +0200
@@ -62,6 +62,7 @@
 
 GType      gtk_hscrollbar_get_type (void) G_GNUC_CONST;
 GtkWidget* gtk_hscrollbar_new      (GtkAdjustment *adjustment);
+void       ubuntu_gtk_hscrollbar_init (void);
 
 
 G_END_DECLS
Index: gtk+-3.0.9/gtk/gtkmain.c
===================================================================
--- gtk+-3.0.9.orig/gtk/gtkmain.c	2011-06-06 22:01:31.435723345 +0200
+++ gtk+-3.0.9/gtk/gtkmain.c	2011-06-06 19:55:18.630171830 +0200
@@ -855,6 +855,11 @@
 
   _gtk_accel_map_init ();
 
+  ubuntu_gtk_scrolled_window_init ();
+  ubuntu_gtk_scrollbar_init ();
+  ubuntu_gtk_hscrollbar_init ();
+  ubuntu_gtk_vscrollbar_init ();
+
   /* Set the 'initialized' flag.
    */
   gtk_initialized = TRUE;
Index: gtk+-3.0.9/gtk/gtkscrollbar.c
===================================================================
--- gtk+-3.0.9.orig/gtk/gtkscrollbar.c	2011-06-06 22:01:31.579724063 +0200
+++ gtk+-3.0.9/gtk/gtkscrollbar.c	2011-06-06 19:57:52.322933951 +0200
@@ -58,6 +58,9 @@
 
 static void gtk_scrollbar_style_updated (GtkWidget *widget);
 
+static GtkWidget* (*os_scrollbar_new) (GtkOrientation, GtkAdjustment*) = NULL;
+static gboolean use_overlay_scrollbar = FALSE;
+
 G_DEFINE_TYPE (GtkScrollbar, gtk_scrollbar, GTK_TYPE_RANGE)
 
 static void
@@ -164,8 +167,68 @@
   g_return_val_if_fail (adjustment == NULL || GTK_IS_ADJUSTMENT (adjustment),
                         NULL);
 
+  if (use_overlay_scrollbar)
+    return os_scrollbar_new (orientation, adjustment);
+
   return g_object_new (GTK_TYPE_SCROLLBAR,
                        "orientation", orientation,
                        "adjustment",  adjustment,
                        NULL);
 }
+
+/*
+ * ubuntu_gtk_scrollbar_init:
+ *
+ * Initialize local use of the overlay-scrollbar module.
+ * 
+ * If the module is installed, this code checks both a whitelist
+ * and a blacklist to decide whether to activate the remplacement
+ * scrollbars.
+ *
+ * It is possible to force the feature to be disabled by setting
+ * the LIBOVERLAY_SCROLLBAR environment variable to either '0' or an
+ * empty value.
+ */
+void
+ubuntu_gtk_scrollbar_init (void)
+{
+  static gboolean init_once = FALSE;
+
+  if (init_once == FALSE)
+    {
+      GModule *module = NULL;
+      gpointer symbol = NULL;
+
+      gchar *flag = (gchar*) g_getenv ("LIBOVERLAY_SCROLLBAR");
+
+      /* check if LIBOVERLAY_SCROLLBAR is set to 0 or an empty value
+         and disable the feature in this case */
+      if (flag != NULL && (*flag == '\0' || *flag == '0'))
+        goto skip_loading;
+
+      /* default extension library to use for this release */
+      gchar *path = "/usr/lib/liboverlay-scrollbar3-0.2.so.0";
+
+      module = g_module_open (path, G_MODULE_BIND_LOCAL);
+      if (module == NULL)
+        goto skip_loading;
+
+      /* check the blacklist, in all cases */
+      if (g_module_symbol (module, "os_utils_is_blacklisted", &symbol))
+        {
+          gboolean (*os_utils_is_blacklisted) (const gchar*) = symbol;
+          if (os_utils_is_blacklisted (g_get_prgname ()) == TRUE)
+            goto skip_loading;
+        }
+
+      /* all controls are positive: the feature can be activated now */
+      if (g_module_symbol (module, "os_scrollbar_new", &symbol))
+        {
+          os_scrollbar_new = symbol;
+          use_overlay_scrollbar = TRUE;
+        }
+
+skip_loading:
+      init_once = TRUE;
+    }
+}
Index: gtk+-3.0.9/gtk/gtkscrollbar.h
===================================================================
--- gtk+-3.0.9.orig/gtk/gtkscrollbar.h	2011-06-06 22:01:31.619724258 +0200
+++ gtk+-3.0.9/gtk/gtkscrollbar.h	2011-06-06 19:58:12.079031917 +0200
@@ -68,6 +68,7 @@
 GType       gtk_scrollbar_get_type (void) G_GNUC_CONST;
 GtkWidget * gtk_scrollbar_new      (GtkOrientation  orientation,
                                     GtkAdjustment  *adjustment);
+void        ubuntu_gtk_scrollbar_init (void);
 
 G_END_DECLS
 
Index: gtk+-3.0.9/gtk/gtkscrolledwindow.c
===================================================================
--- gtk+-3.0.9.orig/gtk/gtkscrolledwindow.c	2011-06-06 22:01:31.659724455 +0200
+++ gtk+-3.0.9/gtk/gtkscrolledwindow.c	2011-06-06 20:02:19.400258318 +0200
@@ -220,6 +220,8 @@
 
 static guint signals[LAST_SIGNAL] = {0};
 
+static gboolean use_overlay_scrollbar = FALSE;
+
 G_DEFINE_TYPE (GtkScrolledWindow, gtk_scrolled_window, GTK_TYPE_BIN)
 
 
@@ -1210,7 +1212,7 @@
 
       gtk_widget_style_get (widget, "scrollbars-within-bevel", &scrollbars_within_bevel, NULL);
 
-      if (!scrollbars_within_bevel)
+      if (!scrollbars_within_bevel && !use_overlay_scrollbar)
         {
           GtkStateFlags state;
           GtkBorder padding, border;
@@ -1766,7 +1768,7 @@
 
       if (priv->shadow_type != GTK_SHADOW_NONE)
 	{
-          if (!scrollbars_within_bevel)
+          if (!scrollbars_within_bevel && !use_overlay_scrollbar)
             {
               child_allocation.x -= padding.left + border.left;
               child_allocation.width += padding.left + padding.right + border.left + border.right;
@@ -1814,7 +1816,7 @@
 
       if (priv->shadow_type != GTK_SHADOW_NONE)
 	{
-          if (!scrollbars_within_bevel)
+          if (!scrollbars_within_bevel && !use_overlay_scrollbar)
             {
               child_allocation.y -= padding.top + border.top;
 	      child_allocation.height += padding.top + padding.bottom + border.top + border.bottom;
@@ -2055,6 +2057,58 @@
 }
 
 /*
+ * ubuntu_gtk_scrolled_window_init:
+ *
+ * Initialize local use of the overlay-scrollbar module.
+ * 
+ * If the module is installed, this code checks both a whitelist
+ * and a blacklist to decide whether to activate the remplacement
+ * scrollbars.
+ *
+ * It is possible to force the feature to be disabled by setting
+ * the LIBOVERLAY_SCROLLBAR environment variable to either '0' or an
+ * empty value.
+ */
+void
+ubuntu_gtk_scrolled_window_init (void)
+{
+  static gboolean init_once = FALSE;
+
+  if (init_once == FALSE)
+    {
+      GModule *module = NULL;
+      gpointer symbol = NULL;
+
+      gchar *flag = (gchar*) g_getenv ("LIBOVERLAY_SCROLLBAR");
+
+      /* check if LIBOVERLAY_SCROLLBAR is set to 0 or an empty value
+         and disable the feature in this case */
+      if (flag != NULL && (*flag == '\0' || *flag == '0'))
+        goto skip_loading;
+
+      /* default extension library to use for this release */
+      gchar *path = "/usr/lib/liboverlay-scrollbar3-0.2.so.0";
+
+      module = g_module_open (path, G_MODULE_BIND_LOCAL);
+      if (module == NULL)
+        goto skip_loading;
+
+      /* check the blacklist, in all cases */
+      if (g_module_symbol (module, "os_utils_is_blacklisted", &symbol))
+        {
+          gboolean (*os_utils_is_blacklisted) (const gchar*) = symbol;
+          if (os_utils_is_blacklisted (g_get_prgname ()) == TRUE)
+            goto skip_loading;
+        }
+
+      use_overlay_scrollbar = TRUE;
+
+skip_loading:
+      init_once = TRUE;
+    }
+}
+
+/*
  * _gtk_scrolled_window_get_spacing:
  * @scrolled_window: a scrolled window
  * 
@@ -2070,6 +2124,9 @@
     
   g_return_val_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window), 0);
 
+  if (use_overlay_scrollbar)
+    return 0;
+
   class = GTK_SCROLLED_WINDOW_GET_CLASS (scrolled_window);
 
   if (class->scrollbar_spacing >= 0)
Index: gtk+-3.0.9/gtk/gtkscrolledwindow.h
===================================================================
--- gtk+-3.0.9.orig/gtk/gtkscrolledwindow.h	2011-06-06 22:01:31.679724552 +0200
+++ gtk+-3.0.9/gtk/gtkscrolledwindow.h	2011-06-06 20:02:52.764423758 +0200
@@ -123,6 +123,7 @@
                                                            gint               height);
 
 gint _gtk_scrolled_window_get_scrollbar_spacing (GtkScrolledWindow *scrolled_window);
+void ubuntu_gtk_scrolled_window_init            (void);
 
 
 G_END_DECLS
Index: gtk+-3.0.9/gtk/gtkvscrollbar.c
===================================================================
--- gtk+-3.0.9.orig/gtk/gtkvscrollbar.c	2011-06-06 22:01:31.507723704 +0200
+++ gtk+-3.0.9/gtk/gtkvscrollbar.c	2011-06-06 20:05:06.117085008 +0200
@@ -31,6 +31,8 @@
 #include "gtkvscrollbar.h"
 #include "gtkintl.h"
 
+static GtkWidget* (*os_scrollbar_new) (GtkOrientation, GtkAdjustment*) = NULL;
+static gboolean use_overlay_scrollbar = FALSE;
 
 /**
  * SECTION:gtkvscrollbar
@@ -75,7 +77,67 @@
   g_return_val_if_fail (adjustment == NULL || GTK_IS_ADJUSTMENT (adjustment),
                         NULL);
 
+  if (use_overlay_scrollbar)
+    return os_scrollbar_new (GTK_ORIENTATION_VERTICAL, adjustment);
+
   return g_object_new (GTK_TYPE_VSCROLLBAR,
                        "adjustment", adjustment,
                        NULL);
 }
+
+/*
+ * ubuntu_gtk_vscrollbar_init:
+ *
+ * Initialize local use of the overlay-scrollbar module.
+ * 
+ * If the module is installed, this code checks both a whitelist
+ * and a blacklist to decide whether to activate the remplacement
+ * scrollbars.
+ *
+ * It is possible to force the feature to be disabled by setting
+ * the LIBOVERLAY_SCROLLBAR environment variable to either '0' or an
+ * empty value.
+ */
+void
+ubuntu_gtk_vscrollbar_init (void)
+{
+  static gboolean init_once = FALSE;
+
+  if (init_once == FALSE)
+    {
+      GModule *module = NULL;
+      gpointer symbol = NULL;
+
+      gchar *flag = (gchar*) g_getenv ("LIBOVERLAY_SCROLLBAR");
+
+      /* check if LIBOVERLAY_SCROLLBAR is set to 0 or an empty value
+         and disable the feature in this case */
+      if (flag != NULL && (*flag == '\0' || *flag == '0'))
+        goto skip_loading;
+
+      /* default extension library to use for this release */
+      gchar *path = "/usr/lib/liboverlay-scrollbar3-0.2.so.0";
+
+      module = g_module_open (path, G_MODULE_BIND_LOCAL);
+      if (module == NULL)
+        goto skip_loading;
+
+      /* check the blacklist, in all cases */
+      if (g_module_symbol (module, "os_utils_is_blacklisted", &symbol))
+        {
+          gboolean (*os_utils_is_blacklisted) (const gchar*) = symbol;
+          if (os_utils_is_blacklisted (g_get_prgname ()) == TRUE)
+            goto skip_loading;
+        }
+
+      /* all controls are positive: the feature can be activated now */
+      if (g_module_symbol (module, "os_scrollbar_new", &symbol))
+        {
+          os_scrollbar_new = symbol;
+          use_overlay_scrollbar = TRUE;
+        }
+
+skip_loading:
+      init_once = TRUE;
+    }
+}
Index: gtk+-3.0.9/gtk/gtkvscrollbar.h
===================================================================
--- gtk+-3.0.9.orig/gtk/gtkvscrollbar.h	2011-06-06 22:01:31.543723883 +0200
+++ gtk+-3.0.9/gtk/gtkvscrollbar.h	2011-06-06 20:08:59.662243113 +0200
@@ -68,6 +68,7 @@
 
 GType      gtk_vscrollbar_get_type (void) G_GNUC_CONST;
 GtkWidget* gtk_vscrollbar_new      (GtkAdjustment *adjustment);
+void       ubuntu_gtk_vscrollbar_init (void);
 
 
 G_END_DECLS
